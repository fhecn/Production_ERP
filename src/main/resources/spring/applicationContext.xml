<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.erp"/>

    <!--事务注解驱动-->
    <tx:annotation-driven transaction-manager="txmanager" />

    <!--自动去增加处理器适配器和处理器映射器-->
    <mvc:annotation-driven validator="validator" conversion-service="conversionService"/>


    <!--配置静态资源解析-->
    <mvc:default-servlet-handler/>

    <!--<mvc:resources mapping="/**" location="/,/WEB-INF/jsp/"/>-->

    <!--配置拦截器-->
  <!--  <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.erp.interceptor.AuthorizedInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!--保证我们使用的是同一个数据源-->
    <bean id="txmanager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
    </bean>

    <!--用C3P0数据源-->
    <!--<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--<property name="user" value="root"/>-->
        <!--<property name="password" value="123456"/>-->
        <!--<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/production_ssm?serverTimezone=GMT"/>-->
        <!--<property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>-->
    <!--</bean>&ndash;&gt;-->

    <!--用druid数据源-->
    <bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="root"/>
        <property name="password" value="123"/>
        <property name="url" value="jdbc:mysql://localhost:3306/production_ssm?serverTimezone=GMT"/>
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    </bean>

    <!--jsp指定一个视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <!--<property name="order" value="2"></property>-->
        <!--<property name="viewNames" value="*.jsp"/>-->
    </bean>

    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewNames" value="*.html"/>
    </bean>-->

    <!--整合mybatis和spring-->
    <!--步骤一：就是把之前在service层手动做的初始化工作交给spring来做-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--步骤二：让spring创建dao层接口的实例-->
    <!--需要配置多个接口-->
    <!--<bean class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="org.deepsl.hrm.dao.UserDao"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>-->

    <!--只要配置一个包名就好了-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.erp.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!--配置文件解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--文件上传大小限制，单位是B-->
        <property name="maxUploadSize" value="500000000"/>
    </bean>


    <!--配置参数校验的框架-->
    <bean  id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
    </bean>

    <!--配置日期转换器-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.erp.utils.DateConvert"/>
            </set>
        </property>
    </bean>
</beans>